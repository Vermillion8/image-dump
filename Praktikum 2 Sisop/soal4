#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>

int main(int argc, char *argv[])
{
  // Check if there are the required arguments
  if (argc != 5)
  {
    printf("Error: Invalid number of arguments\n");
    return 1;
  }

  // Get the hour, minute, second
  int hour, minute, second;
  if (strcmp(argv[1], "*") == 0)
  {
    hour = -1;
  }
  else
  {
    hour = atoi(argv[1]);
    if (hour < 0 || hour > 23)
    {
      printf("Error: Invalid hour argument\n");
      return 1;
    }
  }

  if (strcmp(argv[2], "*") == 0)
  {
    minute = -1;
  }
  else
  {
    minute = atoi(argv[2]);
    if (minute < 0 || minute > 59)
    {
      printf("Error: Invalid minute argument\n");
      return 1;
    }
  }

  if (strcmp(argv[3], "*") == 0)
  {
    second = -1;
  }
  else
  {
    second = atoi(argv[3]);
    if (second < 0 || second > 59)
    {
      printf("Error: Invalid second argument\n");
      return 1;
    }
  }

  // Check the script file
  if (access(argv[4], F_OK) == -1)
  {
    printf("Error: Script file does not exist\n");
    return 1;
  }
  else if (access(argv[4], X_OK) == -1)
  {
    printf("Error: Script file is not executable\n");
    return 1;
  }

  pid_t pid = fork();
  if (pid < 0)
  {
    exit(EXIT_FAILURE);
  }
  if (pid > 0)
  {
    exit(EXIT_SUCCESS);
  }

  umask(0);

  pid_t sid = setsid();
  if (sid < 0)
  {
    exit(EXIT_FAILURE);
  }

  if ((chdir("/")) < 0)
  {
    exit(EXIT_FAILURE);
  }

  close(STDIN_FILENO);
  close(STDOUT_FILENO);
  close(STDERR_FILENO);

  // Loop every second
  time_t current_time;
  struct tm *local_time;
  while (1)
  {
    // Get the current local time
    current_time = time(NULL);
    local_time = localtime(&current_time);

    // Check if the current time matches the specified time
    if ((hour == -1 || hour == local_time->tm_hour) &&
        (minute == -1 || minute == local_time->tm_min) &&
        (second == -1 || second == local_time->tm_sec))
    {
      pid_t pid = fork();
      if (pid == 0)
      {
        execl("/bin/bash", "/bin/bash", argv[4], NULL);
      }
    }
    sleep(1);
  }

  return 0;
}
